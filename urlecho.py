import cgi
import os
import re
import urllib
import urlparse
import mimetypes

from django.utils import simplejson 
from google.appengine.api import urlfetch
from google.appengine.api.urlfetch import DownloadError 
from google.appengine.ext import webapp
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import run_wsgi_app

class BaseURLEchoHandler(webapp.RequestHandler):
  def parseRequestQueryStringParams(self, requestQueryString, paramsList):
    requestQueryString = "&" + requestQueryString
    paramIndexes = [(param, requestQueryString.find('&' + param + '=')) for param in paramsList]
    paramIndexes = sorted(filter(lambda x: x[1]!=-1, paramIndexes),key=lambda x:x[1])
    paramIndexes = [(paramIndexes[i][0], paramIndexes[i][1] + len(paramIndexes[i][0]) + 2, len(requestQueryString) if (i == (len(paramIndexes)-1)) else paramIndexes[i+1][1])
                    for i in range(len(paramIndexes))]
    return dict((param[0], requestQueryString[param[1]:param[2]]) for param in paramIndexes)
    
  def get(self):
    responseParams, isDebugMode = self.parseResponseParams(self.request.query_string)
    
    # process debug mode
    if isDebugMode:
      debugHeaders = {}
      debugHeaders.update(self.response.headers)
      if responseParams.has_key('headers'):
        debugHeaders.update(responseParams['headers'])
      self.response.headers['Content-Type'] = 'text'
      self.response.out.write("Request received:\n%s\n\n" % self.request.url)
      self.response.out.write("Status code:\n%s\n\n" % (responseParams['statusCode'] if responseParams.has_key('statusCode') else "200"))
      self.response.out.write("Headers:\n%s\n\n" % "\n".join( item[0] + ": " + item[1] for item in debugHeaders.items()))
      self.response.out.write("Content:\n%s" % responseParams['content'])
    else:
      # process status
      if responseParams.has_key('statusCode'):
        self.response.set_status(responseParams['statusCode'])
      
      # process headers
      if responseParams.has_key('headers'):
        for headerName in responseParams['headers'].keys():
          self.response.headers[headerName] = responseParams['headers'][headerName]
      
      # process content
      if responseParams.has_key('content'):
        self.response.out.write(responseParams['content'])
    
    return

class JsonStringURLEchoHandler(BaseURLEchoHandler):
  def parseResponseParams(self, queryString):
    requestParams = self.parseRequestQueryStringParams(queryString, ['jsonRequest', 'debugMode'])
    
    requestBody = "{}"
    if requestParams.has_key('jsonRequest'):
      requestBody = urllib.unquote(requestParams['jsonRequest'])
    responseParams = simplejson.loads(requestBody)
    
    isDebugMode = requestParams.has_key('debugMode') and requestParams['debugMode'] == "1"
    return responseParams, isDebugMode

class URLGadgetHandler(BaseURLEchoHandler):
  UrlGadgetTemplate = '<?xml version="1.0" encoding="UTF-8" ?><Module><ModulePrefs title="URL Gadget generated by UrlEcho service for %s" />  <Content type="url" href="%s"></Content></Module>'

  def parseResponseParams(self, queryString):
    responseParams = {}
    requestParams = self.parseRequestQueryStringParams(queryString, ['destinationUrl', 'debugMode'])
    responseParams['content'] = URLGadgetHandler.UrlGadgetTemplate % (requestParams['destinationUrl'], requestParams['destinationUrl'])
    isDebugMode = requestParams.has_key('debugMode') and requestParams['debugMode'] == "1"
    return responseParams, isDebugMode

class QueryStringHandler(BaseURLEchoHandler):  
  def parseResponseParams(self, queryString):
    responseParams = {}
    
    requestParams = self.parseRequestQueryStringParams(queryString, ['status','headers','content','debugMode'])
    
    # parse status
    if requestParams.has_key('status'):
      responseParams['statusCode'] = int(requestParams['status'])
    
    # parse headers
    if requestParams.has_key('headers'):
      headers = requestParams['headers'].split("&")
      responseParams['headers'] = dict(map(lambda x: map(urllib.unquote, x.split("=", 1)), headers))
    
    # process content
    if requestParams.has_key('content'):
      responseParams['content'] = urllib.unquote(requestParams['content'])
    
    isDebugMode = requestParams.has_key('debugMode') and requestParams['debugMode'] == "1"
    return responseParams, isDebugMode
    
class RedirectToGoogleCodeHandler(webapp.RequestHandler):
  def get(self):
    self.redirect('http://code.google.com/p/urlecho')
    
application = webapp.WSGIApplication([('/generateUrlGadget.*', URLGadgetHandler),
                                      ('/generateJson.*', JsonStringURLEchoHandler),
                                      ('/generate.*', QueryStringHandler),
                                      ('/.*', RedirectToGoogleCodeHandler),], debug=True)

def main():
  run_wsgi_app(application)

if __name__ == "__main__":
  main()